pico-8 cartridge // http://www.pico-8.com
version 36
__lua__
-- main
t=0

function draw_playfield()
	cls(0)
	ptn=1+4+32+128
	ptn=ptn+(shl(ptn,8))
	fillp(ptn)
	rectfill(12,4,12+13*8,4+13*8,3)
	fillp(0)
	map(0,0,12,4,13,13)
end

function draw_score()
	print("score "..score, 12, 122, 7)
	print("moves "..moves, 64, 122, 7)
end

function _draw()
	draw_playfield()
	draw_board()
	draw_cursor()
	draw_score();
	t += 1
end

function _init()
	cls()
	initialize_deck()
	initialize_board()
end

function carry_out()
	fn=get_fn()
	if fn==0 and moves >= 5 then
		x=flr(curx/2)
		y=flr(cury/2)
		make_joker(ab2idx(x,y))
		moves-=5
	elseif fn==1 and moves >= 1 then
		x1=flr(curx/2)
		x2=flr((curx+1)/2)
		y1=flr(cury/2)
		y2=flr((cury+1)/2)
		moves-=1
		swap_cards(ab2idx(x1,y1),ab2idx(x2,y2))
		swap_cards(ab2idx(x1,y2),ab2idx(x2,y1))
	elseif fn==2 and moves >= 1  then
		x1=flr(curx/2)
		x2=flr((curx+1)/2)
		y1=flr(cury/2)
		moves-=1
		swap_cards(ab2idx(x1,y1),ab2idx(x2,y1))
	elseif fn==3 and moves >= 1  then
		x1=flr(curx/2)
		y1=flr(cury/2)
		y2=flr((cury+1)/2)
		moves-=1
		swap_cards(ab2idx(x1,y1),ab2idx(x1,y2))
	end
end

function update_row_mode()
	if btnp(4) then
		offer()
	end
	if btnp(5) then
		cursor_mode=0
	end
	if btnp(0) then
		curcol=(curcol-1)%3
		curwhat=1
	end
	if btnp(1) then
		curcol=(curcol+1)%3
		curwhat=1
	end
	if btnp(2) then
		currow=(currow-1)%3
		curwhat=0
	end
	if btnp(3) then
		currow=(currow+1)%3
		curwhat=0
	end
end

function update_normal_mode()
	if btnp(4) then
		carry_out()
	end
	if btnp(5) then
		cursor_mode=1
	end
	if btnp(0) then
		curx-=1
		if curx<0 then curx=0 end
	end
	if btnp(1) then
		curx+=1
		if curx>4 then curx=4 end
	end
	if btnp(2) then
		cury-=1
		if cury<0 then cury=0 end
	end
	if btnp(3) then
		cury+=1
		if cury>4 then cury=4 end
	end
end

function _update()
	animate_board()
	if cursor_mode==0 then
		update_normal_mode()
	elseif cursor_mode==1 then
		update_row_mode()
	end
end


-- draw functions

-- card sizes
sx,sy=23,23

function print_card(card,xx,yy)
	if card<=0 then
		return
	end
	cx,cy=cursor()
	x=xx or cx
	y=yy or cy
	s=suit(card)
	v=val(card)
	c=get_color(s)
	l=lb[v]
	r=s
	if s==5 then
		r=5
		l=""
	end
	str=l
	w=#str*4
	print(l,x-w/2+1,y-6,c)
	spr(r,x-3,y)
end

function draw_card(card,x,y,t)
	v=val(card)
	s=suit(card)
	rect(x+2,y,x+sx-3,y+sy-1,5)
	rect(x,y+2,x+sx-1,y+sy-3,5)
	rect(x+1,y+1,x+sx-2,y+sy-2,6)
	if card==0 then
	 rectfill(x+3,y+3,x+sx-4,y+sy-4,6)
	else
	 rectfill(x+3,y+3,x+sx-4,y+sy-4,7)
	 print_card(card,x+sx/2,y+sy/2)
	end
	n=-t*20
	if n<0 then n=0 end
	for a=1,n do
		rx=rnd(sx)+x
		ry=rnd(sy)+y
		pset(rx,ry,9)
	end
end

-- card values

-- suits:
-- 0=face down (card==0)
-- 1=diamonds  (card==1+)
-- 2=clubs     (card==14+)
-- 3=hearts    (card==27+)
-- 4=spades    (card==40+)
-- 5=joker     (card==53)

lb={"a","2","3","4","5","6","7","8","9","10","j","q","k","jkr"}
deck={}

function get_random_card()
	if #deck==0 then
		return nil
	end
	r=flr(rnd(#deck))+1
	v=deck[r]
	del(deck,v) 
	return v
end

function initialize_deck()
	for a=1,4*13 do
		deck[a]=a
	end
	temp={}
	for a=0,4*13 do
		if (a > 0) then
			temp[#temp]=get_random_card()
		end
		if (a%13 == 0) then
			temp[#temp]=53
		end
	end
	deck={}
	for a=1,#temp do
		deck[#deck]=temp[a]
	end
end

function get_color(suit)
	if (suit==1 or suit==3) return 8
	return 5	
end

function suit(x)
	if (x<=0) return 0
	if (x>=53) return 5
	return flr((x-1)/13)+1
end

function val(x)
	if (x==0) return 0
	if (x>=53) return 14
	return ((x-1)%13)+1
end

-- board state

board={}
boffs={}
btarg={}
bxsit={}
score=0
moves=10
swaps=10

bx0=20
by0=12
bsp=9

selx=0
sely=0

-- 0==normal
-- 1==submit configuration
cursor_mode=0

curx=0
cury=0
currow=0
curcol=0
-- 0==row
-- 1==col
curwhat=0

function ab2idx(a,b)
	return a+b*3
end

function pos(x)
	if (x==2) then return sx+bsp end
	if (x==4) then return 2*(sx+bsp) end
	return 0
end

-- 0==make card a joker
-- 1==rotate
-- 2==swap horiz
-- 3==swap vert
function get_fn()
	if curx%2==0 and cury%2==0 then
		return 0,bx0+pos(curx),by0+pos(cury),sx,sy
	end
	x1=bx0+8+curx*16
	y1=by0+8+cury*16
	x2=7
	y2=7
	f=3
	if curx%2==1 and cury%2==1 then
		f=1
	elseif curx%2==1 then
		f=2
	end
	return f,x1,y1,x2,y2
end

function same_value(i1,i2)
	v1=val(i1)
	v2=val(i2)
	if v1==14 then return true,v2 end
	if v2==14 then return true,v1 end
	if v1==v2 then return true,v1 end
	return false,nil
end

function seq_up(i1,i2)
	v1=val(i1)
	v2=val(i2)
	if v1==14 and v2>1 then return true,v2-1,v2 end
	if v1<13 and v2==14 then return true,v1,v1+1 end
	if v2==v1+1 then return true,v1,v2 end
	return false,nil,nil
end

function seq_dn(i1,i2)
	v1=val(i1)
	v2=val(i2)
	if v1==14 and v2<13 then return true,v2+1,v2 end
	if v1>2 and v2==14 then return true,v1,v1-1 end
	if v1==v2+1 then return true,v1,v2 end
	return false,nil,nil
end

function get_combo(i)
	local j={}
	local c={}
	for a=1,3 do
	 c[a]=board[i[a]]
		j[a]=val(board[i[a]])
	end
-- all jokers
	if j[1]==14 and j[2]==14 and j[3]==14 then
		return "all jokers",5000,8
	end
-- same value
	t12,v12=same_value(c[1],c[2])
	t23,v23=same_value(c[2],c[3])
	if t12 and t23 and v12==v23 then
		return "all "..lb[v12],v12*100,5
	end
-- seq up
	t12,v11,v12=seq_up(c[1],c[2])
	t23,v22,v23=seq_up(c[2],c[3])
	if t12 and t23 and v12==v22 then
		return "sequence up",500,5
	end
-- seq dn
	t12,v11,v12=seq_dn(c[1],c[2])
	t23,v22,v23=seq_dn(c[2],c[3])
	if t12 and t23 and v12==v22 then
		return "sequence down",500,5
	end
-- nothing
	return "nothing special",0,0
end

function get_config()
	if curwhat==0 then
		i={0,1,2}
		for a=1,3 do
			i[a]=i[a]+3*(currow)
		end
	elseif curwhat==1 then
		i={0,3,6}
		for a=1,3 do
			i[a]=i[a]+curcol
		end
	else
		return nil
	end
	x1,y1=999,999
	x2,y2=0,0
	for a=1,3 do
		local x,y=card_pos(i[a])
		if x+sx>x2 then x2=x+sx end
		if y+sx>y2 then y2=y+sx end
		if x<x1 then x1=x end
		if y<y1 then y1=y end
	end
	local txt,pts,plusmoves=get_combo(i)
	return txt,pts,plusmoves,x1,y1,x2-x1,y2-y1
end

function draw_cursor()
	if cursor_mode==0 then
		fn,x1,y1,x2,y2=get_fn()
		c=(shr(t,4)%2)+10
		rect(x1,y1,x1+x2,y1+y2,c)
	elseif cursor_mode==1 then
		txt,pts,plusmoves,x1,y1,x2,y2=get_config()
		c=(shr(t,4)%2)+10
		rect(x1,y1,x1+x2,y1+y2,c)
		print(txt,0,115,7)
	end
end

function offer()
	txt,value,plusmoves=get_combo(i)
	if (value>0) then
		board[i[1]]=get_next_card() or 53
		board[i[2]]=get_next_card() or 53
		board[i[3]]=get_next_card() or 53
		score+=value
		moves+=plusmoves
	end
end

function card_pos(slot)
	local x=bx0+(slot%3)*(sx+bsp)
	local y=by0+flr(slot/3)*(sy+bsp)
	x+=boffs[slot][1]
	y+=boffs[slot][2]
	return x,y
end

function initialize_board()
	for a=0,8 do
		board[a]=get_next_card()
		boffs[a]={rnd(5)-2,rnd(5)-2}
		btarg[a]={0,0}
		bxsit[a]=0
	end
end

function draw_board()
	for a=0,8 do
		local x,y=card_pos(a)
		draw_card(board[a],x,y,bxsit[a])
	end
end

function animate_board()
	for a=0,8 do
		local dx=btarg[a][1]-boffs[a][1]
		local dy=btarg[a][2]-boffs[a][2]
		if dx<-2 then dx=-2 end
		if dy<-2 then dy=-2 end
		if dx>2 then dx=2 end
		if dy>2 then dy=2 end
		boffs[a][1]+=dx
		boffs[a][2]+=dy
		if bxsit[a]<0 then bxsit[a]+=1 end
	end
end

function swap_cards(a,b)
	ax,ay=card_pos(a)
	bx,by=card_pos(b)
	v=board[a]
	board[a]=board[b]
	board[b]=v
	boffs[a][1]+=bx-ax
	boffs[a][2]+=by-ay
	boffs[b][1]+=ax-bx
	boffs[b][2]+=ay-by
end

function make_joker(a)
	if board[a]==53 then
		return
	end
	bxsit[a]=-30
	board[a]=53
end

__gfx__
00000000000800000055500008808800000500000444440000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000008880000055500088888880005550004444444000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700088888005505055088888880055555004440444000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000888888805500055008888800555555500004440000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000088888000505050008888800050505000044400000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700008880000005000000888000000500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000800000055500000080000005550000044400000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000ccccc0000ccc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000c00000d000ccc0000c000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000cc000dd0000c0000c00000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000ccc0ddd000000000c00000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000cc000dd0000d0000c000c0c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000c00000d000ddd0000c00cc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000ddddd0000c0ccc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000014141414141400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0014141414141414141414151414141400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0014151511151515111515151414141400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0014151515151515151515151414141400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0014121513151215131512151414141400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0014151515151515151515151414141400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0014151511151515111515151414141400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0015151515151515151515151414141400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1415121513151215131512151514141400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1500000000000000000000151414141400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1500151511151515111515151414141400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1415151515151515151515151414141400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1414141414141414141414141414141400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1414141414141414141414141414141400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1414141414141414141414141414141400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1414141414141414141414141414141400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
0001000000000250500000026050000002605026050250502505023050220501f0501b05018050160501505015050000000000000000000000000000000000000000000000000000000000000000000000000000
