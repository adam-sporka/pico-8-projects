pico-8 cartridge // http://www.pico-8.com
version 36
__lua__
-- CARD FUNCTIONS

-- suits
-- 0 = undef
-- 1 = hearts
-- 2 = diamonds
-- 3 = clubs
-- 4 = spades

-- values
-- 1 = A
-- 2...10 = 2...10
-- 11 = J
-- 12 = Q
-- 13 = K

lb={"a","2","3","4","5","6","7","8","9","10","j","q","k","jkr"}
sx,sy=32,32

function get_color(suit)
if (suit==1 or suit==2) return 8
if (suit==3 or suit==4) return 5
return 12
end

function suit(ncard)
if (ncard<=0) return 0
if (ncard>=53) return 5
return flr((ncard-1)/13)+1
end

function val(ncard)
if (ncard==0) return 0
if (ncard>=53) return 14
return ((ncard-1)%13)+1
end

function print_card(ncard,xx,yy)
if ncard<=0 then
return
end
cx,cy=cursor()
x=xx or cx
y=yy or cy
s=suit(ncard)
v=val(ncard)
c=get_color(s)
l=lb[v]
r=s
if s==5 then
r=5
l=""
end
str=l
w=#str*4
print(l,x-w/2+1,y-6,c)
spr(r,x-3,y)
end

function draw_card(ncard,x,y)
v=val(ncard)
s=suit(ncard)
rect(x+2,y,x+sx-3,y+sy-1,5)
rect(x,y+2,x+sx-1,y+sy-3,5)
rect(x+1,y+1,x+sx-2,y+sy-2,6)
if ncard==0 then
rectfill(x+3,y+3,x+sx-4,y+sy-4,6)
else
rectfill(x+3,y+3,x+sx-4,y+sy-4,7)
print_card(ncard,x+sx/2,y+sy/2)
end
n=-t*20
if n<0 then n=0 end
for a=1,n do
rx=rnd(sx)+x
ry=rnd(sy)+y
pset(rx,ry,9)
end
end


global=_ENV

class=setmetatable({
new=function(self,tbl)
local tbl=tbl or {}
setmetatable(tbl,{__index=self})
return tbl
end
},{__index=_ENV})

-- DCard is a card in the deck
-- This is the only place that persists the state of a card

-- State
-- 0 = not yet dealt
-- 1 = dealt
-- 2 = discarded
dcard=class:new({
ncard=5,
state=0
})

-- Deck is the list of cards
deck=class:new({
cards={},
new=function(self,tbl)
local tbl=class.new(self,tbl)
for a=1,60 do
local card=dcard:new({ncard=a})
add(self.cards,card)
end
for i=#self.cards, 2, -1 do
local j = flr(rnd(i))
self.cards[i], self.cards[j] = self.cards[j], self.cards[i]
end
return tbl
end,
})

deck.draw=function(_ENV)
rectfill(0,120,127,123,1)
local x=0
for card in all(cards) do
x+=2
line(x,121,x,122,get_color(suit(card.ncard)))
end
print(#cards,0,0,1)
print(test,0,11,1)
end

t=0

function _init()
game_deck=deck.new()
end

function _draw()
cls()
game_deck:draw()
end

function _update()
if btnp(4) then
game_deck2=deck.new();
end
end

__gfx__
00000000088088000008000000555000000500000444440000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000888888800088800000555000005550004444444000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700888888800888880055050550055555004440444000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000088888008888888055000550555555500004440000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000088888000888880005050500050505000044400000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700008880000088800000050000000500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000800000008000000555000005550000044400000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000ccccc0000ccc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000c00000d000ccc0000c000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000cc000dd0000c0000c00000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000ccc0ddd000000000c00000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000cc000dd0000d0000c000c0c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000c00000d000ddd0000c00cc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000ddddd0000c0ccc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000










